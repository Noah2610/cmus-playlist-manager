#!/bin/bash
# Generates playlist text files for all directories in the given path (first argument).
# Each directory will become a playlist,
# with its members being all audio files found within the directory (recursively).

# shellcheck source=./share.sh disable=SC2155
SCRIPT_PATH="$( realpath "$0" )"
_dir="$( dirname "$SCRIPT_PATH" )"
source "${_dir}/share.sh"
unset _dir

SCRIPT_NAME="$0"

AUDIO_EXTS=( "mp3" "wav" "ogg" )
_find_ext_iname='-iname *.'
AUDIO_EXTS_FIND="${_find_ext_iname}$( join_by " -o ${_find_ext_iname}" "${AUDIO_EXTS[@]}" )"
unset _find_ext_iname

ARG_SRC_DIR=
ARG_DEST_DIR=
OPT_DEPTH=1

check "dirname"
check "pwd"
check "find"

function gen_help_text {
    local script_name_display="$(clr "${CLR_CODE[@]}")${SCRIPT_NAME}$(clrrs)"
    local help_txt

    read -rd '' help_txt <<- HELP_END
$script_name_display

${CLRHEADER}SYNOPSIS${CLRRS}
    $script_name_display ${CLRARG}[-d N] SRC_DIR DEST_DIR${CLRRS}
    $script_name_display ${CLRARG}--help|-h${CLRRS}

${CLRHEADER}DESCRIPTION${CLRRS}
    Generates a playlist text file for each directory
    inside the given ${CLRARG}SRC_DIR${CLRRS}.
    The playlist file is simply a text file with each line
    being the full path to an audio file inside the directory (recursively).
    Looks for audio files with the extensions:
        ${CLRCODE}.$( join_by " ." "${AUDIO_EXTS[@]}" )${CLRRS}
    Generated playlist files have the extension: ${CLRCODE}.${PLAYLIST_EXT}${CLRRS}

${CLRHEADER}ARGUMENTS${CLRRS}
    ${CLRARG}SRC_DIR${CLRRS}
        Path to the directory containing directories
        with audio files for which to create playlists.

    ${CLRARG}DEST_DIR${CLRRS}
        Path to the directory where the generated playlist
        files should be placed in.

${CLRHEADER}OPTIONS${CLRRS}
    ${CLRARG}--help, -h${CLRRS}
        Print this help text and exit.

    ${CLRARG}--depth, -d DEPTH${CLRRS}
        ${CLRBOLD}DEFAULT: ${CLRCODE}1${CLRRS}
        How deeply to create playlists inside each directory.
        For example, let's say we have a ${CLRCODE}TobyFox/${CLRRS} directory,
        inside the ${CLRARG}SRC_DIR${CLRRS}; the script would create
        a playlist with all audio files found in the
        directory (recursively). But let's say we also
        have a ${CLRCODE}TobyFox/Undertale/${CLRRS} directory;
        with ${CLRCODE}-d 2${CLRRS} a separate ${CLRCODE}TobyFox/Undertale${CLRRS}
        playlist will be created, otherwise no playlist
        will be created for the nested directory.
        Note, that a depth of ${CLRCODE}0${CLRRS} will only create a playlist for ${CLRARG}SRC_DIR${CLRRS}.
HELP_END

    echo "$help_txt"
}

function print_help_and_exit {
    local help_txt="$( gen_help_text )"
    echo "$help_txt"
    exit 0
}

function parse_args {
    ARG_SRC_DIR=
    ARG_DEST_DIR=
    OPT_DEPTH=1

    while [ $# -gt 0 ]; do
        case "$1" in
            "--help"|"-h")
                print_help_and_exit
                shift
                ;;

            "--depth"|"-d")
                [ -z "$2" ] && err "${CLRCODE}${1}${CLRRS} requires an argument"
                [[ $2 =~ ^[0-9]+$ ]] || err "${CLRCODE}${1}${CLRRS} requires an integer argument"
                OPT_DEPTH="$2"
                shift; shift
                ;;

            *)
                if [ -z "$ARG_SRC_DIR" ]; then
                    ARG_SRC_DIR="$1"
                elif [ -z "$ARG_DEST_DIR" ]; then
                    ARG_DEST_DIR="$1"
                else
                    warn "Invalid argument: ${CLRCODE}${1}${CLRRS}"
                fi
                shift
                ;;
        esac
    done
}

function verify_args {
    [ -z "$ARG_SRC_DIR" ] \
        && err "${CLRCODE}SRC_DIR${CLRRS} must be given (first argument)"
    [ -z "$ARG_DEST_DIR" ] \
        && err "${CLRCODE}DEST_DIR${CLRRS} must be given (second argument)"
    check_dir "$ARG_SRC_DIR"
    [ -d "${ARG_DEST_DIR}" ] || {
        msg "Creating new destination directory at ${CLRCODE}${ARG_DEST_DIR}${CLRRS}"
        mkdir -p "${ARG_DEST_DIR}"
    }
}

function gen_playlists {
    local playlist_src
    while IFS= read -rd '' playlist_src; do
        gen_playlist_from_dir "$playlist_src"
    done < <(find "$ARG_SRC_DIR" -maxdepth "${OPT_DEPTH}" -type d -print0)
}

function gen_playlist_from_dir {
    local playlist_src="$1"
    local src_dir_repl="$( dirname "$ARG_SRC_DIR" )/"
    local playlist_name="${playlist_src/$src_dir_repl/}"
    local playlist_dest="${ARG_DEST_DIR}/${playlist_name}.${PLAYLIST_EXT}"

    mkdir -p "$( dirname "$playlist_dest" )"

    local audio_files
    # shellcheck disable=SC2086
    mapfile -t audio_files < <(
        find "${playlist_src}" \
            -type f \
            \( ${AUDIO_EXTS_FIND} \)
    )

    # Write playlist files
    if [ ${#audio_files[@]} -gt 0 ]; then
        msg "Generating playlist ${CLRCODE}${playlist_name}${CLRRS}"
        join_by $'\n' "${audio_files[@]}" > "$playlist_dest"
    fi
}

function main {
    parse_args "$@"
    verify_args
    gen_playlists
}

main "$@"
