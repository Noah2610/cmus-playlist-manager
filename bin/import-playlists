#!/bin/bash
# Using `cmus-remote`, removes all existing cmus playlists
# and imports new playlists from the files in the given directory (first argument).

# shellcheck source=./share.sh disable=SC2155
SCRIPT_PATH="$( realpath "$0" )"
_dir="$( dirname "$SCRIPT_PATH" )"
source "${_dir}/share.sh"
unset _dir

SCRIPT_NAME="$0"
CMUS_DISPLAY="${CLRCODE}cmus${CLRRS}"
CMUS_CMD_DELAY="0.001s"

ARG_DIR=
ARG_DELETE=0

check "find"
check "cmus"
check "cmus-remote"

function gen_help_text {
    local script_name_display="$(clr "${CLR_CODE[@]}")${SCRIPT_NAME}$(clrrs)"
    local help_txt

    read -rd '' help_txt <<- HELP_END
$script_name_display

${CLRHEADER}SYNOPSIS${CLRRS}
    $script_name_display ${CLRARG}[-D] PLAYLISTS_DIR${CLRRS}
    $script_name_display ${CLRARG}--help|-h${CLRRS}

${CLRHEADER}DESCRIPTION${CLRRS}
    Using ${CLRCODE}cmus-remote${CLRRS}, import all playlist files
    found in ${CLRARG}PLAYLISTS_DIR${CLRRS} (recursively) into ${CMUS_DISPLAY}.

${CLRHEADER}ARGUMENTS${CLRRS}
    ${CLRARG}PLAYLISTS_DIR${CLRRS}
        Path to the directory where the playlist files are.

${CLRHEADER}OPTIONS${CLRRS}
    ${CLRARG}--help, -h${CLRRS}
        Print this help text and exit.

    ${CLRARG}--delete, -D${CLRRS}
        ${CLRBOLD}UNIMPLEMENTED${CLRRS}
        Before importing playlists,
        delete all existing ${CMUS_DISPLAY} playlists.
HELP_END

    echo "$help_txt"
}

function print_help_and_exit {
    local help_txt="$( gen_help_text )"
    echo "$help_txt"
    exit 0
}

function parse_args {
    ARG_DIR=
    ARG_DELETE=0

    while [ $# -gt 0 ]; do
        case "$1" in
            "--help"|"-h")
                print_help_and_exit
                shift
                ;;

            "--delete"|"-D")
                is_positive "$ARG_DELETE" \
                    && warn "${CLRCODE}${1}${CLRRS} given more than once; this has no additional effect"
                ARG_DELETE=1
                shift
                ;;

            [^-]*)
                [ -n "$ARG_DIR" ] \
                    && err "${CLRCODE}PLAYLISTS_DIR${CLRRS} argument can only be given once"
                ARG_DIR="$1"
                shift
                ;;

            *)
                warn "Invalid argument ${CLRCODE}${1}${CLRRS}"
                shift
                ;;
        esac
    done
}

function verify_args {
    [ -z "$ARG_DIR" ] \
        && err "${CLRCODE}PLAYLISTS_DIR${CLRRS} must be given (first argument)"
    check_dir "$ARG_DIR"
}

function check_cmus_running {
    cmus-remote -Q &> /dev/null \
        || err "${CMUS_DISPLAY} isn't running"
}

# TODO
function delete_cmus_playlists {
    warn "Deleting existing ${CMUS_DISPLAY} playlists is not implemented..."

    # cmus_switch_to_playlists_view
    # msg "Deleting existing cmus playlists"

    # Here are some command ideas I was playing with:

    # This works, but relies on `cmus` being run
    # in a very specifically named `tmux` session/window/pane.
    # We need to send the "y" keypress to confirm deletion.
    # ```
    # echo "win-remove" \
    #     | cmus-remote & \
    #     tmux send-keys -t "music:cmus.0" "y"
    # ```

    # This only removes all songs from a playlist,
    # and leaves the empty playlist behind.
    # ```
    # cmus-remote <<-END
    #     mark
    #     win-remove
    # END
    # ```
}

function import_playlists {
    cmus_switch_to_playlists_view

    local playlist_file
    while IFS= read -rd '' playlist_file; do
        import_playlist_from_file "$playlist_file"
    done < <(find "$ARG_DIR" -type f -iname "*.${PLAYLIST_EXT}" -print0)
}

function import_playlist_from_file {
    local playlist_file=$( realpath "$1" )
    local playlist_name="$( basename "${playlist_file/\.${PLAYLIST_EXT}/}" )"
    check_file "$playlist_file"
    msg "Importing playlist ${CLRCODE}${playlist_name}${CLRRS}"

    # shellcheck disable=SC2178
    local cmd="
        pl-import $playlist_file
        /${playlist_name}.${PLAYLIST_EXT}
        pl-rename $playlist_name
    "

    # shellcheck disable=SC2128
    echo "$cmd" | cmus-remote

    sleep "$CMUS_CMD_DELAY"
}

function cmus_switch_to_playlists_view {
    cmus-remote -C "view 3"
}

function main {
    parse_args "$@"
    verify_args
    check_cmus_running
    is_positive "$ARG_DELETE" && delete_cmus_playlists
    import_playlists
}

main "$@"
