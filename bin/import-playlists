#!/bin/bash
# Using `cmus-remote`, removes all existing cmus playlists
# and imports new playlists from the files in the given directory (first argument).

# shellcheck source=./share.sh disable=SC2155
SCRIPT_PATH="$( realpath "$0" )"
_dir="$( dirname "$SCRIPT_PATH" )"
source "${_dir}/share.sh"
unset _dir

SCRIPT_NAME="$0"

ARG_DIR=

check "cmus"
check "cmus-remote"

function gen_help_text {
    local script_name_display="$(clr "${CLR_CODE[@]}")${SCRIPT_NAME}$(clrrs)"
    local cmus_display="${CLRCODE}cmus${CLRRS}"
    local help_txt

    read -rd '' help_txt <<- HELP_END
$script_name_display

${CLRHEADER}SYNOPSIS${CLRRS}
    $script_name_display ${CLRARG}PLAYLISTS_DIR${CLRRS}
    $script_name_display ${CLRARG}--help|-h${CLRRS}

${CLRHEADER}DESCRIPTION${CLRRS}
    Using ${CLRCODE}cmus-remote${CLRRS}, first delete all existing
    ${cmus_display} playlists, then import all playlist files
    in ${CLRARG}PLAYLISTS_DIR${CLRRS} (recursively) into ${cmus_display}.

${CLRHEADER}ARGUMENTS${CLRRS}
    ${CLRARG}PLAYLISTS_DIR${CLRRS}
        Path to the directory where the playlist files are.

${CLRHEADER}OPTIONS${CLRRS}
    ${CLRARG}--help, -h${CLRRS}
        Print this help text and exit.
HELP_END

    echo "$help_txt"
}

function print_help_and_exit {
    local help_txt="$( gen_help_text )"
    echo "$help_txt"
    exit 0
}

function parse_args {
    ARG_DIR=

    while [ $# -gt 0 ]; do
        case "$1" in
            "--help"|"-h")
                print_help_and_exit
                shift
                ;;

            *)
                [ -n "$ARG_DIR" ] && err "${CLRCODE}PLAYLISTS_DIR${CLRRS} argument can only be given once"
                ARG_DIR="$1"
                shift
                ;;
        esac
    done
}

function main {
    parse_args "$@"
    verify_args
    # import_playlists
}

function verify_args {
    [ -z "$ARG_DIR" ] \
        && err "${CLRCODE}PLAYLISTS_DIR${CLRRS} must be given (first argument)"
    check_dir "$ARG_DIR"
}

main "$@"
